local Types = require'types'
local class, Any, Array = Types.class, Types.Any, Types.Array
local OMeta = require'ometa' 

local ometa Calc {
  exp     = addexp,
  addexp  = addexp '+' mulexp
          | addexp '-' mulexp
          | mulexp
          , 
  mulexp  = mulexp '*' primexp
          | mulexp '/' primexp
          | primexp
          , 
  primexp = '(' exp ')'
          | numstr
          , 
  numstr  = '-'? digit+
} 
Calc:merge(require'grammar_commons') 


local ometa EvalCalc {
  exp     = addexp,
  addexp  = l:addexp '+' r:mulexp   [l + r]
          | l:addexp '-' r:mulexp   [l - r]
          | mulexp
          , 
  mulexp  = l:mulexp '*' r:primexp  [l * r]
          | l:mulexp '/' r:primexp  [l / r]
          | primexp
          , 
  primexp = '(' exp:exp ')'         [exp] 
          | numstr
          , 
  numstr  = digits:<'-'? digit+>    [tonumber(digits)]
} 
EvalCalc:merge(require'grammar_commons') 



local ometa TableTreeCalc {
  exp     = addexp,
  addexp  = l:addexp '+' r:mulexp   [{'+', l, r}] 
          | l:addexp '-' r:mulexp   [{'-', l, r}] 
          | mulexp
          , 
  mulexp  = l:mulexp '*' r:primexp  [{'*', l, r}] 
          | l:mulexp '/' r:primexp  [{'/', l, r}] 
          | primexp
          , 
  primexp = '(' exp:exp ')'         [exp] 
          | numstr
          , 
  numstr  = digits:<'-'? digit+>    [tonumber(digits)]
} 
TableTreeCalc:merge(require'grammar_commons') 



local BinOp = class {name = 'BinOp', super = {Any}} -- our new AST node type

local ometa OpTreeCalc {
  exp       = addexp,
  addexp    = l:addexp "+" r:mulexp       [BinOp {operator = 'add', left = l, right = r}] 
            | l:addexp "-" r:mulexp       [BinOp {operator = 'sub', left = l, right = r}] 
            | mulexp
            , 
  mulexp    = l:mulexp "*" r:primexp      [BinOp {operator = 'mul', left = l, right = r}] 
            | l:mulexp "/" r:primexp      [BinOp {operator = 'div', left = l, right = r}] 
            | primexp
            , 
  primexp   = "(" exp:exp ")"             [exp] 
            | numstr
            , 
  numstr    = ws* digits:<"-"? digit+>    [tonumber(digits)],
  special   = '+' | '-' | '*' | '/' 
            | '(' | ')' 
} 
OpTreeCalc:merge(require'grammar_commons') 

local Aux = require 'auxiliary'

local ometa MixedOTCalc {
  primexp   = BinOp
            | OpTreeCalc.primexp  -- "super" apply
            ,
  numstr    = number 
            | OpTreeCalc.numstr  -- "super" apply
            ,
  eval      = opr:&BinOp                  Aux.apply([opr.operator], unknown)
            | num:number                  [num]
            | any:.                       [? error('unexpected expression: ' .. tostring(any))]
            , 
  add       = {; left:=eval, right:=eval} [! print('+', left, right)] [left + right],
  sub       = {; left:=eval, right:=eval} [! print('-', left, right)] [left - right],
  mul       = {; left:=eval, right:=eval} [! print('*', left, right)] [left * right],
  div       = {; left:=eval, right:=eval} [! print('/', left, right)] [left / right],
  unknown   = {; operator:=.}             [? error('unexpected operator: ' .. operator)]
} 
MixedOTCalc:merge(OpTreeCalc)

rule MixedOTCalc:primexp()
      &BinOp {; operator = 'add' | 'sub' | 'mul' | 'div' }
  | opr:BinOp [? opr.operator and error('unexpected operator: ' .. opr.operator) or error('operator expected')]
  | OpTreeCalc.primexp
end




local AddOp = class {name = 'AddOp', super = {BinOp}}
local SubOp = class {name = 'SubOp', super = {BinOp}}
local MulOp = class {name = 'MulOp', super = {BinOp}}
local DivOp = class {name = 'DivOp', super = {BinOp}}

local ometa AstCalc {
  exp       = addexp,
  addexp    = l:addexp "+" r:mulexp       [AddOp {left = l, right = r}] 
            | l:addexp "-" r:mulexp       [SubOp {left = l, right = r}] 
            | mulexp
            , 
  mulexp    = l:mulexp "*" r:primexp      [MulOp {left = l, right = r}] 
            | l:mulexp "/" r:primexp      [DivOp {left = l, right = r}] 
            | primexp
            , 
  primexp   = "(" exp:exp ")"             [exp] 
            | numstr
            , 
  numstr    = ws* digits:<"-"? digit+>    [tonumber(digits)],
  special   = '+' | '-' | '*' | '/' 
            | '(' | ')' 
} 
AstCalc:merge(require'grammar_commons') 

local ometa MixedAstCalc {
  primexp   = BinOp
            | AstCalc.primexp -- "super" apply
            ,
  numstr    = number 
            | AstCalc.numstr  -- "super" apply
            ,
  eval      = opr:&BinOp                  Aux.apply([getType(opr)], unknown)
            | num:number                  [num]
            | any:.                       [? error('unexpected expression: ' .. tostring(any))]
            , 
  [AddOp]   = {; left:=eval, right:=eval} [! print('+', left, right)] [left + right],
  [SubOp]   = {; left:=eval, right:=eval} [! print('-', left, right)] [left - right],
  [MulOp]   = {; left:=eval, right:=eval} [! print('*', left, right)] [left * right],
  [DivOp]   = {; left:=eval, right:=eval} [! print('/', left, right)] [left / right],
  unknown   = opr:.                       [? error('unexpected operation kind: ' .. tostring(opr))]
} 
MixedAstCalc:merge(AstCalc)

return {
  Calc          = Calc;
  EvalCalc      = EvalCalc;
  TableTreeCalc = TableTreeCalc,
  BinOp         = BinOp,
  OpTreeCalc    = OpTreeCalc,
  MixedOTCalc   = MixedOTCalc;
  AddOp         = AddOp,
  SubOp         = SubOp,
  MulOp         = MulOp,
  DivOp         = DivOp,
  AstCalc       = AstCalc,
  MixedAstCalc  = MixedAstCalc;
}
