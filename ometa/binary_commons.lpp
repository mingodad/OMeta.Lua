local tostring, tonumber, select, type, getmetatable, setmetatable, rawget
    = tostring, tonumber, select, type, getmetatable, setmetatable, rawget

local bit = require 'bit'
local bnot, band, bor, bxor, lshift, rshift = bit.bnot, bit.band, bit.bor, bit.bxor, bit.lshift, bit.rshift

local Types = require 'types'
local Any, Array = Types.Any, Types.Array
local OMeta = require 'ometa'

local utils = require 'utils'

local Commons = require 'commons'

local ometa BinaryCommons merges Commons {
  byte              = [? type($head) == "number" and band($head, 0xFF) == $head] .,
  char(n)           = codesToString(byte/[n or 1])
}


--[[ 
    Below Grammars cannot be used standalone
    You should merge required packages into the BinaryCommons (main) Grammar
    See gif.lpp and png.lpp examples
]]

local function bitfield(msb, number, bitn)
  local fields = {}
  local f, t, s
  if msb then
    f, t, s = #bitn, 1, -1
  else
    f, t, s = 1, #bitn, 1
  end
  for fn = f, t, s do
    local n = bitn[fn]
    local mask = bnot(lshift(bnot(0), n))
    local field = band(number, mask)
    fields[fn] = field
    number = rshift(number, n)
  end
  return fields
end

-- https://en.wikipedia.org/wiki/Bit_numbering

-- Most Significant Bit First
local ometa Msb0 {
  bit(offset, n)    = val:byte        [rshift(band(rshift(0xFF, offset or 0), val), 8 - (n or 1) - (offset or 0))],
  bitfield(r, bitn) = val:r           [bitfield(true, val, bitn)]
}

-- Least Significant Bit First
local ometa Lsb0 {
  bit(offset, n)    = val:byte        [band(rshift(val, offset or 0), bnot(lshift(bnot(0), n or 1)))],
  bitfield(r, bitn) = val:r           [bitfield(false, val, bitn)]
}

-- https://en.wikipedia.org/wiki/Endianness

local ometa BigEndian {
  int16             = a:byte b:byte   [bor(lshift(a, 8), b)],
  int32             = a:int16 b:int16 [bor(lshift(a, 16), b)]
}

local ometa LittleEndian {
  int16             = b:byte a:byte   [bor(lshift(a, 8), b)],
  int32             = b:int16 a:int16 [bor(lshift(a, 16), b)]
}

BinaryCommons.Msb0 = Msb0
BinaryCommons.Lsb0 = Lsb0
BinaryCommons.BigEndian = BigEndian
BinaryCommons.LittleEndian = LittleEndian

return BinaryCommons
