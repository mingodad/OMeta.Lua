local tostring, tonumber, select, type, getmetatable, setmetatable, rawget
    = tostring, tonumber, select, type, getmetatable, setmetatable, rawget

local Types = require 'types'
local Any, Array = Types.Any, Types.Array
local OMeta = require 'ometa'

local utils = require 'utils'
local StdLib = require 'ometa_stdlib'

local ometa Commons {

  eos                   =                                         ~.,
  empty                 = [? true]                                , -- nothing to return
  
  string                = [? type($head) == 'string']             .,
  number                = [? type($head) == 'number']             .,
  boolean               = [? type($head) == 'boolean']            .,
  table                 = [? type($head) == 'table']              .,
  ['function']          = [? type($head) == 'function']           .,
  
  toNumber(source)      = str:source                              [tonumber(str)],
  toString(source)      = val:source                              [tostring(val)],
  codesToString(source) = val:source ( [? Array:isInstance(val)]  [string.char(unpack(val))]
                                     |                            [string.char(val)]
                                     )
                        ,
  charToCode(source)    = str:source                              [str:byte()],
  
  concat(source, sep)   = chars:source                            [chars:concat(sep)],
  
  notLast(element)      = ^:element &element,
  list(element, delim, minimum)
                        = first:element rest:(delim element)* 
                          [? (#rest + 1) >= (minimum or 0)]       [rest:prepend(first)]
                        | [? not minimum or minimum == 0]         [Array {}]
                        ,
  range(first, last)    = < first (~last .)* last >
}
Commons:merge(StdLib)

return Commons
