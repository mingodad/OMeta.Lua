local tostring, tonumber, select, type, getmetatable, setmetatable, rawget
    = tostring, tonumber, select, type, getmetatable, setmetatable, rawget

local Types = require 'types'
local Any, Array = Types.Any, Types.Array
local OMeta = require 'ometa'

local utils = require 'utils'
local StdLib = require 'ometa_stdlib'

-- Rules of this Grammar use "private" property `Stream::_head`
-- this is not part of API and is therefore subject to change - use with caution

local ometa Commons {

  eos                 =                                               ~.
                      ,
  empty               = [? true]                                      -- nothing to return
                      ,
  string              = [? type(input.stream._head) == 'string']      .
                      ,
  char                = [? type(input.stream._head) == 'string' 
                           and #input.stream._head == 1]              .
                      ,
  number              = [? type(input.stream._head) == 'number']      .
                      ,
  boolean             = [? type(input.stream._head) == 'boolean']     .
                      ,
  table               = [? type(input.stream._head) == 'table']       .
                      ,
  ['function']        = [? type(input.stream._head) == 'function']    .
                      ,
  notLast(element)    = prev:element &element                         [prev]
                      ,
  list(element, delim, minimum)
                      = first:element rest:(delim element)* 
                        [? (#rest + 1) >= (minimum or 0)]             [rest:prepend(first)]
                      | [? not minimum or minimum == 0]               [Array {}]
                      ,
  range(first, last)  = < first (~last .)* last >
}
Commons:merge(StdLib)

return Commons
