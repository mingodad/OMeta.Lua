
local tostring, tonumber, select, type, getmetatable, setmetatable, rawget
    = tostring, tonumber, select, type, getmetatable, setmetatable, rawget

local Types = require 'types'
local Any, Array = Types.Any, Types.Array
local OMeta = require 'ometa'

local utils = require 'utils'

local asc = require 'abstractsyntax_commons'
local Literal, NilLiteral, BooleanLiteral, NumberLiteral, IntegerLiteral, RealLiteral, StringLiteral, Name, Keyword, Special,
      Node, Statement, Expression, Control, Iterative, Invocation
    = asc.Literal, asc.NilLiteral, asc.BooleanLiteral, asc.NumberLiteral, asc.IntegerLiteral, asc.RealLiteral, asc.StringLiteral, asc.Name, asc.Keyword, asc.Special,
      asc.Node, asc.Statement, asc.Expression, asc.Control, asc.Iterative, asc.Invocation

local Commons = require 'commons'
local Aux = require 'auxiliary'

local ometa CharacterPatterns {
  space         = $^:string [? ($^):match('^%s$')],
  digit         = $^:string [? ($^):match('^%d$')],
  hexdigit      = $^:string [? ($^):match('^%x$')],
  lower         = $^:string [? ($^):match('^%l$')],
  upper         = $^:string [? ($^):match('^%u$')],
  letter        = $^:string [? ($^):match('^%a$')],
  alphanum      = $^:string [? ($^):match('^%w$')],
  nameFirst     = $^:string [? ($^):match('^[%a_]$')],
  nameRest      = $^:string [? ($^):match('^[%w_]$')],
  nameString    = Aux.pattern('[%a_][%w_]*')
}

local ometa CharacterSets {
  space         = [? type($.) == 'string' and #$. == 1 and ($.):byte() <= 32] .,
  digit         = [? type($.) == 'string' and #$. == 1 and $. >= '0' and $. <= '9'] .,
  hexdigit      = digit 
                | [? type($.) == 'string' and #$. == 1 and $. >= 'a' and $. <= 'f' or $. >= 'A' and $. <= 'F'] .
                ,
  lower         = [? type($.) == 'string' and #$. == 1 and $. >= 'a' and $. <= 'z'] .,
  upper         = [? type($.) == 'string' and #$. == 1 and $. >= 'A' and $. <= 'Z'] .,
  letter        = lower | upper,
  alphanum      = letter | digit,
  nameFirst     = letter | '_',
  nameRest      = nameFirst | digit,
  nameString    = < nameFirst nameRest* >
}

local ometa GrammarCommons merges Commons, CharacterSets { -- alt. CharacterPatterns
  comment       = < [[--]] strlitL >
                | range([[--]], '\n' | eos)
                ,
  ws            = space | comment,
  char          = [? type($.) == 'string' and #$. == 1]               .,
  name          = ws* ns:nameString ~keyword([ns])                    [Name {ns}],
  token(str)    = ws* ( s:special     [? str == s]                    [Special {s}]
                      | ns:nameString [? str == ns] keyword([ns])     [Keyword {ns}]
                      )
                ,
  escchar       = <'\\' (digit+ | 'x' hexdigit/2 | char)>,
  strlitA       = '\'' str:<(escchar | ~'\'' char)*> '\''             [StringLiteral {str}],
  strlitQ       = '\"' str:<(escchar | ~'\"' char)*> '\"'             [StringLiteral {str, ldelim = '"', rdelim = '"'}],
  strlitB       = '`'  str:<(escchar | ~'`'  char)*> '`'              [StringLiteral {str, ldelim = '`', rdelim = '`'}],
  strlitL       = '[' '[' str:<(~(']' ']') char)*> ']' ']'            [StringLiteral {str, ldelim = '[[', rdelim = ']]'}]
                | '[' eqs:<'='+> '['                             back:[']' .. eqs .. ']'] 
                     str:<(~subsequence([back]) char)*> 
                            subsequence([back])                       [StringLiteral {str, ldelim = '[' .. eqs .. '[', rdelim = ']' .. eqs .. ']'}]
                ,
  intlit        = number:toNumber(<digit+>)                           [IntegerLiteral {number}],
  reallit       = number:toNumber(<(digit+ '.' digit* | '.' digit+) 
                           (('e' | 'E') ('+' | '-')? digit+)?>)       [RealLiteral {number}]
                ,
  hexlit        = number:toNumber(<'0' ('x' | 'X') hexdigit+>)        [IntegerLiteral {number}],
  boollit       = str:nameString [? str == 'true' or str == 'false']  [BooleanLiteral {str == 'true'}],
  nillit        = str:nameString [? str == 'nil']                     [NilLiteral {}]
}

return GrammarCommons
