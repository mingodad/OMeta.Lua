
local tostring, tonumber, select, type, getmetatable, setmetatable, rawget
    = tostring, tonumber, select, type, getmetatable, setmetatable, rawget

local Types = require 'types'
local Any, Array = Types.Any, Types.Array
local OMeta = require 'ometa'

local utils = require 'utils'

local asc = require 'abstractsyntax_commons'
local Literal, NilLiteral, BooleanLiteral, NumberLiteral, IntegerLiteral, RealLiteral, StringLiteral, Name, Keyword, Special,
      Node, Statement, Expression, Control, Iterative, Invocation
    = asc.Literal, asc.NilLiteral, asc.BooleanLiteral, asc.NumberLiteral, asc.IntegerLiteral, asc.RealLiteral, asc.StringLiteral, asc.Name, asc.Keyword, asc.Special,
      asc.Node, asc.Statement, asc.Expression, asc.Control, asc.Iterative, asc.Invocation

local las = require 'lua_abstractsyntax'
local Get, Set, Group, Block, Chunk, Do, While, Repeat, If, ElseIf, 
      For, ForIn, Function, MethodStatement, FunctionStatement, FunctionExpression, 
      Return, Break, LastStatement, Call, Send, BinaryOperation, UnaryOperation, 
      GetProperty, VariableArguments, TableConstructor, SetProperty, Goto, Label
    = las.Get, las.Set, las.Group, las.Block, las.Chunk, las.Do, las.While, las.Repeat, las.If, las.ElseIf, 
      las.For, las.ForIn, las.Function, las.MethodStatement, las.FunctionStatement, las.FunctionExpression, 
      las.Return, las.Break, las.LastStatement, las.Call, las.Send, las.BinaryOperation, las.UnaryOperation, 
      las.GetProperty, las.VariableArguments, las.TableConstructor, las.SetProperty, las.lua52.Goto, las.lua52.Label

local LuaGrammar = require 'lua_grammar'

local ometa Lua52Grammar merges LuaGrammar {
  
  special   = [[::]]
            | LuaGrammar.special
            ,
  keyword   = LuaGrammar.keyword
            | 'goto'
            ,
  stat      = LuaGrammar.stat 
            | "goto" labelName:name                                         [Goto {name = labelName}]
            | label
            ,
  label     = "::" labelName:name "::"                                      [Label {name = labelName}]
}

return Lua52Grammar
